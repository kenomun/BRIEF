// Prisma Schema

datasource db {
  provider = "postgresql"  // O cualquier otro proveedor de base de datos (MySQL, SQLite, etc.)
  url      = env("DATABASE_URL")  // Utiliza el URL configurado en .env
}

generator client {
  provider = "prisma-client-js"
}


// Tabla de Administradores (Admin)
model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla de Profesores (Professor)
model Professor {
  id        Int      @id @default(autoincrement())
  name      String
  subject   String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students  Student[]
}

// Tabla de Preguntas (Question)
model Question {
  id                 Int       @id @default(autoincrement())
  questionText       String    
  option1            String    
  option2            String    
  option3            String   
  option4            String    
  correctOption     Int      
  educationalIndicator String 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Tabla de Estudiantes (Student)
model Student {
  id         Int      @id @default(autoincrement())
  name       String
  school     String   
  email      String   @unique
  password   String 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  results    Result[] 
  professorId Int?     
  professor  Professor? @relation(fields: [professorId], references: [id]) // Relación con el profesor
}

// Tabla de Resultados (Result) de los estudiantes en los exámenes
model Result {
  id               Int       @id @default(autoincrement())
  studentId        Int
  student          Student   @relation(fields: [studentId], references: [id])
  totalScore       Int       
  contentScores    Json     
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}


